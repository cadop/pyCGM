import unittest
import pyCGM_Single.pyCGM as pyCGM
import numpy as np

rounding_precision = 8

class TestCalculations(unittest.TestCase):

    def testPelvisJointCenter(self):
        frame = {'RASI': np.array([ 357.90066528,  377.69210815, 1034.97253418]),
                 'LASI': np.array([ 145.31594849,  405.79052734, 1030.81445312]),
                 'RPSI': np.array([ 274.00466919,  205.64402771, 1051.76452637]),
                 'LPSI': np.array([ 189.15231323,  214.86122131, 1052.73486328]), }
        expected = [np.array([251.60830688, 391.74131775, 1032.89349365]),
                    np.array([[251.74063624, 392.72694721, 1032.78850073],
                              [250.61711554, 391.87232862, 1032.8741063],
                              [251.60295336, 391.84795134, 1033.88777762]]),
                    np.array([231.57849121, 210.25262451, 1052.24969482])]

        result = pyCGM.pelvisJointCenter(frame)
        self.assertEqual(result[0].all(), expected[0].all())
        self.assertEqual(result[1].all(), expected[1].all())
        self.assertEqual(result[2].all(), expected[2].all())

    def testHipJointCenter(self):
        pel_origin = [251.60830688, 391.74131775, 1032.89349365]
        pel_x = [251.74063624, 392.72694721, 1032.78850073]
        pel_y = [250.61711554, 391.87232862, 1032.8741063]
        pel_z = [251.60295336, 391.84795134, 1033.88777762]
        vsk = {'MeanLegLength': 940.0, 'R_AsisToTrocanterMeasure': 72.512,
               'L_AsisToTrocanterMeasure': 72.512, 'InterAsisDistance': 215.908996582031}
        expected = [[182.57097863, 339.43231855, 935.52900126], [308.38050472, 322.80342417, 937.98979061]]

        result = pyCGM.hipJointCenter(None, pel_origin, pel_x, pel_y, pel_z, vsk)
        np.testing.assert_allclose(result, expected, rounding_precision)

    def testHipAxisCenter(self):
        l_hip_jc = [182.57097863, 339.43231855, 935.52900126]
        r_hip_jc = [308.38050472, 322.80342417, 937.98979061]
        pelvis_axis = [np.array([251.60830688, 391.74131775, 1032.89349365]),
                       np.array([[251.74063624, 392.72694721, 1032.78850073],
                              [250.61711554, 391.87232862, 1032.8741063],
                              [251.60295336, 391.84795134, 1033.88777762]]),
                       np.array([231.57849121, 210.25262451, 1052.24969482])]
        expected = [[245.47574167208043, 331.1178713574418, 936.7593959314677],
                  [[245.60807102843359, 332.10350081526684, 936.6544030111602],
                   [244.48455032769033, 331.2488822330648, 936.7400085831541],
                   [245.47038814489719, 331.22450494659665, 937.7536799036861]]]

        result = pyCGM.hipAxisCenter(l_hip_jc, r_hip_jc, pelvis_axis)
        np.testing.assert_almost_equal(result[0], expected[0], rounding_precision)
        np.testing.assert_almost_equal(result[1], expected[1], rounding_precision)

    def testKneeJointCenter(self):
        frame = {'RTHI': np.array([426.50338745, 262.65310669, 673.66247559]),
                 'LTHI': np.array([ 51.93867874, 320.01849365, 723.03186035]),
                 'RKNE': np.array([416.98687744, 266.22558594, 524.04089355]),
                 'LKNE': np.array([84.62355804, 286.69122314, 529.39819336])}
        hip_JC = [[182.57097863, 339.43231855, 935.52900126], [308.38050472, 322.80342417, 937.98979061]]
        delta = 0
        vsk = {'RightKneeWidth': 105.0, 'LeftKneeWidth': 105.0}
        expected = [np.array([364.17774614, 292.17051722, 515.19181496]),
                    np.array([143.55478579, 279.90370346, 524.78408753]),
                    np.array([[[364.61959153, 293.06758353, 515.18513093],
                               [363.29019771, 292.60656648, 515.04309095],
                               [364.04724541, 292.24216264, 516.18067112]],
                              [[143.65611282, 280.88685896, 524.63197541],
                               [142.56434499, 280.01777943, 524.86163553],
                               [143.64837987, 280.04650381, 525.76940383]]])]

        result = pyCGM.kneeJointCenter(frame, hip_JC, delta, vsk)
        self.assertEqual(result[0].all(), expected[0].all())
        self.assertEqual(result[1].all(), expected[1].all())
        self.assertEqual(result[2].all(), expected[2].all())

    def testAnkleJointCenter(self):
        frame = {'RTIB': np.array([433.97537231, 211.93408203, 273.3008728 ]),
                 'LTIB': np.array([ 50.04016495, 235.90718079, 364.32226562]),
                 'RANK': np.array([422.77005005, 217.74053955,  92.86152649]),
                 'LANK': np.array([ 58.57380676, 208.54806519,  86.16953278])}
        knee_JC = [np.array([364.17774614, 292.17051722, 515.19181496]),
                   np.array([143.55478579, 279.90370346, 524.78408753]),
                   np.array([[[364.61959153, 293.06758353, 515.18513093],
                           [363.29019771, 292.60656648, 515.04309095],
                           [364.04724541, 292.24216264, 516.18067112]],
                          [[143.65611282, 280.88685896, 524.63197541],
                           [142.56434499, 280.01777943, 524.86163553],
                           [143.64837987, 280.04650381, 525.76940383]]])]
        delta = 0
        vsk = {'RightAnkleWidth': 70.0, 'LeftAnkleWidth': 70.0, 'RightTibialTorsion': 0.0, 'LeftTibialTorsion': 0.0}
        expected = [np.array([393.76181608, 247.67829633, 87.73775041]),
                    np.array([98.74901939, 219.46930221, 80.6306816]),
                    [[np.array([394.48171575, 248.37201348, 87.715368]),
                      np.array([393.07114384, 248.39110006, 87.61575574]),
                      np.array([393.69314056, 247.78157916, 88.73002876])],
                     [np.array([98.47494966, 220.42553803, 80.52821783]),
                      np.array([97.79246671, 219.20927275, 80.76255901]),
                      np.array([98.84848169, 219.60345781, 81.61663775])]]]

        result = pyCGM.ankleJointCenter(frame, knee_JC, delta, vsk)
        self.assertEqual(result[0].all(), expected[0].all())
        self.assertEqual(result[1].all(), expected[1].all())
        np.testing.assert_allclose(result[2], expected[2], rounding_precision)

    def testFootJointCenter(self):
        frame = {'RTOE': np.array([442.81997681, 381.62280273,  42.66047668]),
                 'LTOE': np.array([ 39.43652725, 382.44522095,  41.78911591])}
        vsk = {'RightStaticRotOff': 0.015683497632642047, 'RightStaticPlantFlex': 0.2702417907002757,
               'LeftStaticRotOff': 0.009402910292403022, 'LeftStaticPlantFlex': 0.20251085737834015}
        ankle_JC = [np.array([393.76181608, 247.67829633, 87.73775041]),
                    np.array([98.74901939, 219.46930221, 80.6306816]),
                    [[np.array([394.48171575, 248.37201348, 87.715368]),
                      np.array([393.07114384, 248.39110006, 87.61575574]),
                      np.array([393.69314056, 247.78157916, 88.73002876])],
                     [np.array([98.47494966, 220.42553803, 80.52821783]),
                      np.array([97.79246671, 219.20927275, 80.76255901]),
                      np.array([98.84848169, 219.60345781, 81.61663775])]]]
        knee_JC = [np.array([364.17774614, 292.17051722, 515.19181496]),
                   np.array([143.55478579, 279.90370346, 524.78408753]),
                   np.array([[[364.61959153, 293.06758353, 515.18513093],
                           [363.29019771, 292.60656648, 515.04309095],
                           [364.04724541, 292.24216264, 516.18067112]],
                          [[143.65611282, 280.88685896, 524.63197541],
                           [142.56434499, 280.01777943, 524.86163553],
                           [143.64837987, 280.04650381, 525.76940383]]])]
        delta = 0
        expected = [np.array([442.81997681, 381.62280273, 42.66047668]),
                    np.array([39.43652725, 382.44522095, 41.78911591]),
                    [[[442.8462412676692, 381.6513024007671, 43.65972537588915],
                      [441.8773505621594, 381.95630350196393, 42.67574106247485],
                      [442.48716163075153, 380.68048378251575, 42.69610043598381]],
                     [[39.566526257915626, 382.50901000467115, 42.778575967950964],
                      [38.493133283871245, 382.1460684058263, 41.932348504971834],
                      [39.74166341694723, 381.493150197213, 41.81040458481808]]]]

        result = pyCGM.footJointCenter(frame, vsk, ankle_JC, knee_JC, delta)
        self.assertEqual(result[0].all(), expected[0].all())
        self.assertEqual(result[1].all(), expected[1].all())
        np.testing.assert_allclose(result[2], expected[2], rounding_precision)

    def testHeadJC(self):
        frame = {'LFHD': np.array([ 184.55158997,  409.68713379, 1721.34289551]),
                 'RFHD': np.array([ 325.82983398,  402.55450439, 1722.49816895]),
                 'LBHD': np.array([ 197.8621521 ,  251.28889465, 1696.90197754]),
                 'RBHD': np.array([ 304.39898682,  242.91339111, 1694.97497559])}
        vsk = {'HeadOffset': 0.2571990469310653}
        expected = [[[255.21685582510975, 407.11593887758056, 1721.8253843887082],
                     [254.19105385179665, 406.146809183757, 1721.9176771191715],
                     [255.19034370229795, 406.2160090443217, 1722.9159912851449]],
                    [255.19071197509766, 406.1208190917969, 1721.9205322265625]]

        result = pyCGM.headJC(frame, vsk)
        np.testing.assert_allclose(result[0], expected[0], rounding_precision)
        np.testing.assert_allclose(result[1], expected[1], rounding_precision)

    def test_getangle_sho(self):
        axisP = [[0.09010104879445179904, 0.99590937599884910014, 0.00680557152145411237],
                 [0.99377608791559168822, -0.08945440277921079542, -0.06638521605464120512],
                 [-0.06550487076049194002, 0.01274459183355247660, -0.99777085910818641423]]
        axisD = [[0.14362551354236074985, -0.98963110439615320502, -0.00141034441480769601],
                 [0.68540404438920177199, 0.09844473917718232769, 0.72147760135931093828],
                 [-0.71385783444225126004, -0.10458924677044478813, 0.69243633762630452111]]
        expected = [-9.42569150165887, 130.86647058885387, -170.3887751198432]

        result = pyCGM.getangle_sho(axisP, axisD)
        np.testing.assert_almost_equal(result, expected, rounding_precision)

    def test_getangle_spi(self):
        axisP = [[0.13232935635315357104, 0.98562945782504129966, -0.10499292030749529658],
                 [-0.99119134439010281312, 0.13101087562301927392, -0.01938734831355759525],
                 [-0.00535352718324588750, 0.10663358915485332545, 0.99428397221845443710]]
        axisD = [[0.09010104879445179904, 0.99590937599884910014, 0.00680557152145411237],
                 [0.99377608791559168822, -0.08945440277921079542, -0.06638521605464120512],
                 [-0.06550487076049194002, 0.01274459183355247660, -0.99777085910818641423]]
        expected = [-6.4797057790916615, -2.893068979100172, -4.638276625836626]

        result = pyCGM.getangle_spi(axisP, axisD)
        np.testing.assert_almost_equal(result, expected, rounding_precision)

    def test_getangle(self):
        axisP = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        axisD = [[0.13232935635315357103, 0.98562945782504129965, -0.10499292030749529658],
                 [-0.99119134439010281312, 0.13101087562301927391, -0.01938734831355759524],
                 [-0.00535352718324588749, 0.10663358915485332545, 0.99428397221845443709]]
        expected = [-0.30849491450945404, -6.121292793370006, 7.5714311021517124]

        result = pyCGM.getangle(axisP, axisD)
        np.testing.assert_almost_equal(result, expected, rounding_precision)
